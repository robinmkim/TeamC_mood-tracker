<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.teamc.moodtracker.dao.ChatDao">
    <select id="getChatRooms" parameterType="int" resultType="ChatRoom">
        SELECT
            C1.ROOM_ID AS roomId,
            C1.MESSAGE AS MESSAGE,
            MAX(C1.SEND_TIME) AS sendTime
        FROM CHAT C1
                 INNER JOIN (
            SELECT
                ROOM_ID,
                MAX(SEND_TIME) AS MAX_SEND_TIME
            FROM CHAT
            GROUP BY ROOM_ID
        ) C2 ON C1.ROOM_ID = C2.ROOM_ID AND C1.SEND_TIME = C2.MAX_SEND_TIME
        WHERE C1.ROOM_ID IN (
            SELECT ROOM_ID
            FROM CHAT
            WHERE M_ID = #{memberID}
        )
          AND NOT EXISTS (
            SELECT 1
            FROM CHAT C3
            WHERE
                C3.ROOM_ID = C1.ROOM_ID
              AND C3.SEND_TIME = C2.MAX_SEND_TIME
              AND C3.M_ID = #{memberID}
              AND C3.STATUS = 'LEFT'
        )
        GROUP BY C1.ROOM_ID, C1.MESSAGE
    </select>

    <select id="getMemberInfo" parameterType="int" resultType="ChatRoom">
        SELECT M.M_ID otherMemberId, M.M_NAME otherMemberName, C.room_id roomId
        FROM MEMBER M
                 RIGHT JOIN (
            SELECT C1.ROOM_ID ROOM_ID, C1.M_ID M_ID
            FROM CHAT C1
            WHERE C1.ROOM_ID IN (
                SELECT
                    C2.ROOM_ID AS ROOM_ID
                FROM CHAT C2
                         INNER JOIN (
                    SELECT ROOM_ID, MAX(SEND_TIME) AS MAX_SEND_TIME
                    FROM CHAT
                    WHERE M_ID = #{memberId}
                    GROUP BY ROOM_ID
                ) C3  ON C2.ROOM_ID = C3.ROOM_ID AND C2.SEND_TIME = C3.MAX_SEND_TIME
                WHERE C2.STATUS != 'LEFT'
        )
        GROUP BY C1.ROOM_ID, C1.M_ID
        HAVING C1.M_ID != #{memberId}
            )C
        ON M.M_ID = C.M_ID
    </select>


    <select id="getChatMessages" parameterType="map" resultType="ChatMessage">
        SELECT m_id memberId, message, send_time sendTime
        FROM chat
        WHERE room_id = #{roomId}
          AND message IS NOT NULL
          AND status = 'MESSAGE'
          AND send_time > (
            SELECT max(send_time)
            FROM chat
            WHERE room_id = #{roomId}
              AND m_id = #{memberId}
              AND status IN ('LEFT' , 'JOIN')
            GROUP BY room_id, m_id
        )
    </select>

    <insert id="saveChatMessage" parameterType="SaveChat">
        INSERT INTO chat
        VALUES (chat_seq.nextval, #{roomId}, #{memberId}, #{message}, systimestamp, #{status})
    </insert>

    <select id="findExistingChatRoom" parameterType="CheckChat" resultType="int">
        SELECT DISTINCT c1.room_id
        FROM chat c1
                 INNER JOIN chat c2
                            ON c1.room_id = c2.room_id
        WHERE c1.m_id = #{myMemberId} AND c2.m_id = #{otherMemberId}
    </select>

    <select id="newChatRoom" resultType="int">
        select chatroom_seq.nextval from dual
    </select>

    <insert id="exitChatRoom" parameterType="int">
        INSERT INTO chat
        VALUES (chat_seq.nextval, #{roomId}, #{memberId}, NULL, systimestamp, 'LEFT')
    </insert>

    <select id="checkMemberInChatRoom" parameterType="map"  resultType="int">
        SELECT COUNT(*) AS COUNT
        FROM CHAT
        WHERE ROOM_ID = #{roomId}
          AND M_ID = #{memberId}
    </select>

    <select id="getLastMsgStatus" parameterType="map" resultType="String">
        SELECT STATUS
        FROM (
                 SELECT STATUS
                 FROM CHAT
                 WHERE ROOM_ID = #{roomId} AND M_ID = #{memberId}
                 ORDER BY SEND_TIME DESC
             )
        WHERE ROWNUM = 1
    </select>

    <select id="getMembersOfThisRoom" parameterType="int" resultType="int">
        SELECT m_id
        FROM chat
        WHERE room_id = #{room_id)
    </select>
</mapper >
