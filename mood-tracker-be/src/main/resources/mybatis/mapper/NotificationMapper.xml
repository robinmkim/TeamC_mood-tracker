<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.teamc.moodtracker.dao.NotificationDao">

<!--    <select id="selectMyNotificationAll" parameterType="int" resultType="NotificationDto">-->
<!--        SELECT * FROM notice-->
<!--        WHERE m_id_to = #{m_id_to}-->
<!--        ORDER BY n_id DESC-->
<!--    </select>-->
    <resultMap id="NotiWithMemberHandleDto" type="NotificationDto">
        <id property="n_id" column="n_id"/>
        <result property="m_id_to" column="m_id_to"/>
        <result property="m_id_from" column="m_id_from"/>
        <result property="n_state" column="n_state"/>
        <result property="regdate" column="regdate"/>
        <result property="n_type" column="n_type"/>
        <result property="n_content" column="n_content"/>
        <result property="n_url" column="n_url"/>
        <association property="memberDto" javaType="mvo">
            <result property="m_handle" column="m_handle"/>
            <result property="m_img_name" column="m_img_name"/>
            <result property="m_name" column="m_name"/>
        </association>
    </resultMap>

    <select id="selectMyNotificationAll" parameterType="int" resultMap="NotiWithMemberHandleDto">
        SELECT n.*, m.*
        FROM notice n LEFT JOIN MEMBER m
        ON n.m_id_from = m.m_id
        WHERE n.m_id_to = #{m_id_to}
        ORDER BY n.n_id DESC
    </select>

    <select id="selectMyNotificationFollow" parameterType="int" resultMap="NotiWithMemberHandleDto">
        SELECT n.*, m.*
        FROM notice n LEFT JOIN MEMBER m
        ON n.m_id_from = m.m_id
        WHERE m_id_to = #{m_id_to} AND n_type = 'follow'
        ORDER BY n_id DESC
    </select>

    <select id="selectMyNotificationComment" parameterType="int" resultMap="NotiWithMemberHandleDto">
        SELECT n.*, m.*
        FROM notice n LEFT JOIN MEMBER m
        ON n.m_id_from = m.m_id
        WHERE m_id_to = #{m_id_to} AND ( n_type = 'comment'  OR n_type = 'reply' )
        ORDER BY n_id DESC
    </select>

    <select id="selectMyNotificationLike" parameterType="int" resultMap="NotiWithMemberHandleDto">
        SELECT n.*, m.*
        FROM notice n LEFT JOIN MEMBER m
        ON n.m_id_from = m.m_id
        WHERE m_id_to = #{m_id_to} AND ( n_type = 'boardlike' OR n_type = 'commentlike' OR n_type = 'replylike' )
        ORDER BY n_id DESC
    </select>

    <select id="selectUnreadNumber" parameterType="int" resultType="int">
        SELECT count(*) FROM notice
        WHERE m_id_to = #{m_id_to} AND n_state = 1
    </select>

    <update id="readNotice" parameterType="int" >
        UPDATE  notice
        SET n_state = 0
        WHERE m_id_to = #{m_id_to} AND n_id = #{n_id}
    </update>

    <delete id="deleteNotice" parameterType="int">
        DELETE FROM notice
        WHERE m_id_to = #{m_id_to} AND n_id = #{n_id}
    </delete>

    <insert id="insertNotice" parameterType="NotificationDto">
        INSERT INTO notice(n_id, m_id_to, n_state, regdate, n_type, m_id_from, n_content, n_url)
        VALUES(notice_seq.nextVal, #{m_id_to}, 1, sysdate, #{n_type}, #{m_id_from}, #{n_content}, #{n_url})
    </insert>

    <select id="getReplyDetail" parameterType="int" resultType="jh_rvo">
        SELECT *
        FROM reply
        WHERE re_id = #{re_id}
    </select>

    <delete id="deleteNoticeAll" parameterType="int">
        DELETE FROM notice
        WHERE m_id_to = #{m_id_to}
    </delete>

    <delete id="deleteNoticeAllFollow" parameterType="int">
        DELETE FROM notice
        WHERE m_id_to = #{m_id_to} AND n_type = 'follow'
    </delete>

    <delete id="deleteNoticeAllComment" parameterType="int">
        DELETE FROM notice
        WHERE m_id_to = #{m_id_to} AND (n_type = 'comment' OR n_type = 'reply')
    </delete>

    <delete id="deleteNoticeAllLike" parameterType="int">
        DELETE FROM notice
        WHERE m_id_to = #{m_id_to} AND ( n_type = 'boardlike' OR n_type = 'commentlike' OR n_type = 'replylike' )
    </delete>

</mapper>